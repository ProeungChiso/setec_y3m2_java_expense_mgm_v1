/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package expense_management.java;

import config.DatabaseConfig;
import java.awt.Image;
import java.io.File;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public final class ProductForm extends javax.swing.JFrame {

    /**
     * Creates new form ProductForm
     */
    public ProductForm() {
        initComponents();
        getAllCategories();
        getAllProducts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        title = new javax.swing.JLabel();
        desc = new javax.swing.JLabel();
        categoryBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProduct = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdateCategory = new javax.swing.JButton();
        btnDeleteCategory = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        staffMenu = new javax.swing.JMenuItem();
        expenseMenu = new javax.swing.JMenuItem();
        actionMenu = new javax.swing.JMenu();
        logoutMenu = new javax.swing.JMenuItem();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 900));

        title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        title.setText("WELCOME PRODUCT");

        desc.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        desc.setForeground(new java.awt.Color(255, 0, 0));
        desc.setText("*** You are login as user Admin. You can use CRUD Operator to Create, Read, Update, and Delete user expense records. Thank you!");

        categoryBtn.setText("New Category");
        categoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryBtnActionPerformed(evt);
            }
        });

        tableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Product Name", "Qty", "Price", "Image", "Category Name"
            }
        ));
        tableProduct.setRowHeight(50);
        jScrollPane1.setViewportView(tableProduct);

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Category Name"
            }
        ));
        tblCategory.setRowHeight(50);
        jScrollPane3.setViewportView(tblCategory);

        btnCreate.setText("New Product");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdateCategory.setText("Update");
        btnUpdateCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCategoryActionPerformed(evt);
            }
        });

        btnDeleteCategory.setText("Delete");
        btnDeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCategoryActionPerformed(evt);
            }
        });

        jMenu2.setText("Services");

        staffMenu.setText("Staff");
        staffMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffMenuActionPerformed(evt);
            }
        });
        jMenu2.add(staffMenu);

        expenseMenu.setText("Expense");
        expenseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseMenuActionPerformed(evt);
            }
        });
        jMenu2.add(expenseMenu);

        jMenuBar1.add(jMenu2);

        actionMenu.setText("Actions");
        actionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionMenuActionPerformed(evt);
            }
        });

        logoutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        logoutMenu.setText("Logout");
        logoutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuActionPerformed(evt);
            }
        });
        actionMenu.add(logoutMenu);

        jMenuBar1.add(actionMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title)
                            .addComponent(desc))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 920, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCreate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(categoryBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateCategory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteCategory)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(desc)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryBtn)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdateCategory)
                    .addComponent(btnDeleteCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void staffMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffMenuActionPerformed
        // TODO add your handling code here:
        StaffForm staffForm = new StaffForm();
        staffForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_staffMenuActionPerformed

    private void expenseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseMenuActionPerformed
        // TODO add your handling code here:
        AdminForm adminForm = new AdminForm();
        adminForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_expenseMenuActionPerformed

    private void logoutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuActionPerformed
        // TODO add your handling code here:
        LoginForm loginForm = new LoginForm();
        loginForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutMenuActionPerformed

    private void actionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_actionMenuActionPerformed

    private void categoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryBtnActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog("Please enter new category:");
        if (input == null) {
            System.out.println("Null");
        } else {
            System.out.println(input);

            String sql = "INSERT INTO category (category_name) VALUES (?)";

            try {
                Connection conn = DatabaseConfig.getConnection();

                PreparedStatement psm = conn.prepareStatement(sql);

                psm.setString(1, input);

                int rowsInserted = psm.executeUpdate();

                if (rowsInserted > 0) {
                    JOptionPane.showMessageDialog(null, "Category created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    getAllProducts();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to create category.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_categoryBtnActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        CreateProductForm createProductForm = new CreateProductForm();
        createProductForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        System.out.println(tableProduct.getSelectedRow());
        int row = tableProduct.getSelectedRow();

        if (row != -1) {
            int columnCount = tableProduct.getColumnCount();
            Object[] data = new Object[columnCount];

            for (int i = 0; i < columnCount; i++) {
                data[i] = tableProduct.getValueAt(row, i);
            }

            String getProductName = (String) data[1];

            System.out.println(getProductName);

            UpdateProductForm updateProductForm = new UpdateProductForm(getProductName);
            updateProductForm.setVisible(true);
            dispose();

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "No row selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        System.out.println(tableProduct.getSelectedRow());
        int row = tableProduct.getSelectedRow();

        if (row != -1) {
            int columnCount = tableProduct.getColumnCount();
            Object[] data = new Object[columnCount];

            for (int i = 0; i < columnCount; i++) {
                data[i] = tableProduct.getValueAt(row, i);
            }

            String getProductName = (String) data[1];

            System.out.println(getProductName);

            String sql = "DELETE FROM product WHERE product_name = ?";

            try {
                Connection conn = DatabaseConfig.getConnection();

                PreparedStatement pst = conn.prepareStatement(sql);

                pst.setString(1, getProductName);

                int confirmed = JOptionPane.showConfirmDialog(
                        this,
                        "Are you sure you want to delete this product ?",
                        "Delete Confirmation",
                        JOptionPane.YES_NO_OPTION
                );

                if (confirmed == JOptionPane.YES_OPTION) {
                    pst.executeUpdate();
                    getAllProducts();
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "No row selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCategoryActionPerformed
        // TODO add your handling code here:
        System.out.println(tblCategory.getSelectedRow());
        int row = tblCategory.getSelectedRow();

        if (row != -1) {
            int columnCount = tblCategory.getColumnCount();
            Object[] data = new Object[columnCount];

            for (int i = 0; i < columnCount; i++) {
                data[i] = tblCategory.getValueAt(row, i);
            }

            String getCategoryName = (String) data[1];

            System.out.println(getCategoryName);

            String input = JOptionPane.showInputDialog("Please enter new name category:");
            if (input == null) {
                System.out.println("Null");
            } else {
                System.out.println(input);

                String sql = "UPDATE category SET category_name = ? WHERE category_name = ?";

                try {
                    Connection conn = DatabaseConfig.getConnection();

                    PreparedStatement psm = conn.prepareStatement(sql);

                    psm.setString(1, input);
                    psm.setString(2, getCategoryName);

                    int rowsInserted = psm.executeUpdate();

                    if (rowsInserted > 0) {
                        JOptionPane.showMessageDialog(null, "Category updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        getAllCategories();
                        getAllProducts();
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to update category.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "No row selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateCategoryActionPerformed

    private void btnDeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCategoryActionPerformed
        // TODO add your handling code here:
        System.out.println(tblCategory.getSelectedRow());
        int row = tblCategory.getSelectedRow();

        if (row != -1) {
            int columnCount = tblCategory.getColumnCount();
            Object[] data = new Object[columnCount];

            for (int i = 0; i < columnCount; i++) {
                data[i] = tblCategory.getValueAt(row, i);
            }

            String getCategoryName = (String) data[1];

            System.out.println(getCategoryName);
            
            String sql = "DELETE FROM category WHERE category_name = ?";

            try {
                Connection conn = DatabaseConfig.getConnection();

                PreparedStatement pst = conn.prepareStatement(sql);
                
                pst.setString(1, getCategoryName);
                
                
                int confirmed = JOptionPane.showConfirmDialog(
                        this,
                        "Are you sure you want to delete this category ?",
                        "Delete Confirmation",
                        JOptionPane.YES_NO_OPTION
                );
                
                if(confirmed == JOptionPane.YES_OPTION){
                    pst.executeUpdate();
                    getAllCategories();
                    getAllProducts();
                }
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database Error", e.getMessage() ,JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No row selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteCategoryActionPerformed

    public void getAllProducts() {
        String sql = "SELECT * FROM product p JOIN category c ON p.category_id = c.category_id";

        try {
            Connection conn = DatabaseConfig.getConnection();
            PreparedStatement psm = conn.prepareStatement(sql);
            ResultSet rs = psm.executeQuery();

            DefaultTableModel table = (DefaultTableModel) tableProduct.getModel();
            table.setColumnIdentifiers(new Object[]{"ID", "Product Name", "Qty", "Price", "Image", "Category Name"});
            table.setRowCount(0);

            int i = 1;
            while (rs.next()) {
                ImageIcon imageIcon = null;
                String filePath = rs.getString("Image"); // Get image file path

                if (filePath != null && !filePath.isEmpty()) {
                    File imgFile = new File(filePath);
                    if (imgFile.exists()) {  // Ensure the file exists

                        imageIcon = new ImageIcon(new ImageIcon(filePath).getImage()
                                .getScaledInstance(50, 50, Image.SCALE_SMOOTH)); // Resize image
                    } else {
                        System.out.println("Image file not found: " + filePath);
                    }
                }

                Object[] row = {
                    i++,
                    rs.getString("product_name"),
                    rs.getInt("qty"),
                    rs.getDouble("price"),
                    imageIcon,
                    rs.getString("category_name")
                };
                table.addRow(row);
                tableProduct.getColumnModel().getColumn(4).setCellRenderer(new ImageRender());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    void getAllCategories() {
        String sql = "SELECT category_name FROM category";

        try {
            Connection conn = DatabaseConfig.getConnection();

            PreparedStatement psm = conn.prepareStatement(sql);

            ResultSet rs = psm.executeQuery();

            //System.out.print(rs.findColumn("category_name"));
            DefaultTableModel table = (DefaultTableModel) tblCategory.getModel();

            table.setColumnIdentifiers(new Object[]{"ID", "Category Name"});

            table.setRowCount(0);

            int i = 1;
            while (rs.next()) {
                Object[] row = {
                    i++,
                    rs.getString("category_name")
                };
                table.addRow(row);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu actionMenu;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCategory;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateCategory;
    private javax.swing.JButton categoryBtn;
    private javax.swing.JLabel desc;
    private javax.swing.JMenuItem expenseMenu;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JMenuItem logoutMenu;
    private javax.swing.JMenuItem staffMenu;
    private javax.swing.JTable tableProduct;
    private javax.swing.JTable tblCategory;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
